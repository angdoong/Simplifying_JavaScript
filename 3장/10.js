// [tip - 10] :: 객체를 이용해 정적인 키-값을 탐색하라
/* 
    - 객체는 변화가 없고 구조화 된 key-value 데이터를 다루는 경우에 유용하다.
    - 자주 갱신되거나 실행되기 전에는 알 수 없는 동적인 정보를 다루기에는 적합하지 않다.
    - 객체는 단순하기 때문에 정적인 정보를 다루기에 훌륭하다.
    - 계속해서 갱신, 반복, 대체, 정렬해야 할 정보에는 적절하지 않다.(맵을 사용하는것이 나음)
*/

/*
    하지만 정적인 객체도 프로그래밍적으로 정의 할 수 있음
    
    방법 : 
    함수 내에서 객체를 생성하고 다른 함수에 넘겨줄 수 있음
    정보를 수집/전달 -> 다른함수에서 사용 (조작/갱신하지 않아 정적인 정보가 됨) 
    조건 : 데이터를 매번 같은 방식으로 설정하고 사용해야함
    객체를 조작하는것이 아닌, 각각 함수에서 새로운 객체를 생성
    변수를 이용하여 키를 설정하지 않는다. (객체를 전달받는 함수에서 구조를 미리 알고 있다.)
*/



// example : 객체간에 이동시키는 정보에 구조를 추가하기 위해 객체를 사용
// 2. 전달받은 매개변수를 객체로 저장 -> displayBill()에 객체로 넘기기
function getBill(item) {
    return { 
      name: item.name,
      price: item.price
    };
  }
  
  // 1. key, value로 값 저장(객체) -> getBill에 매개변수로 전달
  const bill = getBill({ 
    name: '객실 청소',
    price: 30
  });
  
  // 각 항목을 매개변수로 받는 대신(item, name.. 이런식으로), 
  // 객체를 전달하여 필요한 값을 꺼내 쓸 수 있음
  function displayBill(bill) { // 
    return `${bill.name} 비용은 ${bill.price}달러 입니다.`
  }
  
  console.log(displayBill(bill));
  // "객실 청소 비용은 30달러 입니다."
  
  /* 
    이러한 경우 객체는 다른 컬렉션에 비해 훨씬 강력함 
    - 빠르고 명료
    - 객체해체할당도 가능하여 객체로 데이터를 다루는것이 어느때보다 빠르고 간결
    (객체해제할당은 tip29에서 살펴보자)
    (해제할당은 빠른 탐색이 필요한 경우 객체를 선택해야 할 이유중 하나)

    !!짚어봐야되는경우
    반복적으로 정보를 설정하지는 않았지만, 함수로 새로운 객체를 생성했기 때문에
    프로그래밍을 이용해서 객체에 많은 정보를 추가해야하는 경우에는 맵 객체처럼 다른종류의 컬렉션이 더 적함함
    (맵 객체는 tip13에서 살펴보자)
  */
  
  